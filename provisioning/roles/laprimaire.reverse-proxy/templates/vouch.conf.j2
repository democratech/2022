{{ ansible_managed | comment }}
proxy_set_header Host $http_host;

# send all requests to the `/validate` endpoint for authorization
auth_request /validate;

{% if hostvars[item]['vouch_public_locations'] is defined %}
{% for location in hostvars[item]['vouch_public_locations'] %}
location {{ location }} {
    auth_request off;
    proxy_pass http://{{ hostvars[item]['ansible_host'] }};
}
{% endfor %}
{% endif %}

location = /validate {
    # forward the /validate request to Vouch Proxy
    proxy_pass http://vouch:9090/validate;
    # be sure to pass the original host header
    proxy_set_header Host $http_host;

    # Vouch Proxy only acts on the request headers
    proxy_pass_request_body off;
    proxy_set_header Content-Length "";

    # optionally add X-Vouch-User as returned by Vouch Proxy along with the request
    auth_request_set $auth_resp_x_vouch_user $upstream_http_x_vouch_user;

    # optionally add X-Vouch-IdP-Claims-* custom claims you are tracking
    #    auth_request_set $auth_resp_x_vouch_idp_claims_groups $upstream_http_x_vouch_idp_claims_groups;
    #    auth_request_set $auth_resp_x_vouch_idp_claims_given_name $upstream_http_x_vouch_idp_claims_given_name;
    # optinally add X-Vouch-IdP-AccessToken or X-Vouch-IdP-IdToken
    #    auth_request_set $auth_resp_x_vouch_idp_accesstoken $upstream_http_x_vouch_idp_accesstoken;
    #    auth_request_set $auth_resp_x_vouch_idp_idtoken $upstream_http_x_vouch_idp_idtoken;

    # these return values are used by the @error401 call
    auth_request_set $auth_resp_jwt $upstream_http_x_vouch_jwt;
    auth_request_set $auth_resp_err $upstream_http_x_vouch_err;
    auth_request_set $auth_resp_failcount $upstream_http_x_vouch_failcount;

    # Vouch Proxy can run behind the same Nginx reverse proxy
    # may need to comply to "upstream" server naming
    # proxy_pass http://sso.infra.{{ base_hostname }}/validate;
    # proxy_set_header Host $http_host;
}

# if validate returns `401 not authorized` then forward the request to the error401block
error_page 401 = @error401;

location @error401 {
    # redirect to Vouch Proxy for login
    return 302 https://sso.infra.{{ base_hostname }}/login?url=$scheme://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err;
    # you usually *want* to redirect to Vouch running behind the same Nginx config proteced by https
    # but to get started you can just forward the end user to the port that vouch is running on
    # return 302 http://sso.infra.{{ base_hostname }}:9090/login?url=$scheme://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err;
}
